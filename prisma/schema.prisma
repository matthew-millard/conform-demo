// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  firstName    String
  lastName     String
  username     String        @unique
  email        String        @unique
  sessions     Session[]
  password     Password?
  roles        Role[]
  documents    Document[]
  profileImage ProfileImage?
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String

  @@index([userId])
}

model Permission {
  id          String   @id @default(cuid())
  action      String // create, read, update, delete
  entity      String // 
  access      String // own/any
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  roles       Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String       @default("")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt()
  permissions Permission[]
  users       User[]
}

model Document {
  id          String   @id @default(cuid())
  fileName    String
  url         String   @unique
  publicId    String   @unique
  contentType String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
}

model ProfileImage {
  id          String   @id @default(cuid())
  url         String   @unique
  publicId    String   @unique
  contentType String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String   @unique
}
